### ZSHRC_VERBOSE:
###    0:   no verbosity (only errors)
###   >0:   print files that are loaded by zrcsource
###         warns when a file needs to be (re)compiled
###   >1:   print functions zrcautoload cannot find
###   >2:   print functions zrcautoload loads
###         makes zrcneedcomp verbose
###   >3:   make version checking verbose
ZSHRC_VERBOSE=${ZSHRC_VERBOSE:-0}

# Watch for logins
watch=(notme)

# The format of login / logout reports if the watch parameter is set.
# Default is `%n has %a %l from %m'.
# Recognizes the following escape sequences:
#   %n = name of the user that logged in/out.
#   %a = observed action, i.e. "logged on" or "logged off".
#   %l = line (tty) the user is logged in on.
#   %M = full hostname of the remote host.
#   %m = hostname up to the first `.'.
#   %t or %@ = time, in 12-hour, am/pm format.
#   %w = date in `day-dd' format.
#   %W = date in `mm/dd/yy' format.
#   %D = date in `yy-mm-dd' format.
# WATCHFMT='%n %a %l from %m at %t.'
# WATCHFMT='*knock* *knock* Follow the white rabbit => %n %a %l from %m at %t.'
# WATCHFTM=print '\e[1;35m%B[%b\e[1;32m%B%n%b\e[1;35m%B]%b \e[1;34m%U%a%u \e[1;35mfrom terminal \e[1;31m%M \e[1;35mat \e[1;33m%U%T%u\e[0m''
#WATCHFMT="[%B%t%b] %B%n%b has %a %B%l%b from %B%M%b"
WATCHFMT="%B->%b %n has just %a %(l:tty%l:%U-Ghost-%u)%(m: from %m:)"

# format of process time reports with 'time'
#  %%     A `%'.
#  %U     CPU seconds spent in user mode.
#  %S     CPU seconds spent in kernel mode.
#  %E     Elapsed time in seconds.
#  %P     The CPU percentage, computed as  (%U+%S)/%E.
#  %J     The name of this job.
# Default is: 
#       %E real  %U user  %S system   %P  %J
TIMEFMT="Real: %E User: %U System: %S Percent: %P Cmd: %J"

# The maximum number of events stored in the internal history list. If you use
# # the HIST_EXPIRE_DUPS_FIRST option, setting this value larger than the
# # SAVEHIST size will give you the difference as a cushion for saving
# # duplicated history events.
HISTSIZE=65535

# The name of the file used to store command history. When assigned to, history
# is loaded from the specified file. Also, several invocations of the shell
# running on the same machine will share history if their HISTFILE parameters
# all point to the same file.
# i have finally discovered the difference between `SAVEHIST' and `HISTSIZE'
# thanks to the FAQ. `HISTSIZE' is the number of lines of history that is
# kept within any given, running zsh. `SAVEHIST' is the number of lines of
# history that is written out to a file at the magic, mysterious moment 
# when that event occurs. so cat-ing `HISTFILE' into wc -l should enumerate
# the number of history events 
if (( ! EUID )); then
  HISTFILE=~/.root_histfile
else
  HISTFILE=~/.zsh_history/zsh_history
fi

SAVEHIST=65536
DIRSTACKSIZE=50

# If nonnegative, commands whose combined user and system execution
# times (measured in seconds) are greater than this value have timing
# statistics printed for them.
REPORTTIME=60

# Limit this fuckung "zsh: do you wish to see all NNN possibilities (NNN
# lines)?" downward (default is 100). Only ask before displaying
# completions if doing so would scroll.
LISTMAX=0

# Seconds for login / logout check
export LOGCHECK=20

# Stop annoying MailChecks. I'm not using AOL
unset MAILCHECK

# if your compdef Dir is ~/.zsh
#if [ -d "${HOME}/scripts/zsh" ]; then
#    fpath=( $fpath ${HOME}/scripts/zsh )
#    autoload -U ${HOME}/scripts/zsh/*(:t)
#fi


(( ${+OS} )) || export OS="${OSTYPE%%[0-9.]*}"


export HOSTNAME="`hostname`"

# some variables for specific systems. I *don't* use FreeBSD so i've no
# variables for this.
if [ -e "/etc/debian_version" ]; then
    export LANG="en_US.UTF-8"
else
    case ${OS} in
        linux*) source ${HOME}/.zshrc.d/zshexports/zshexports.linux ;;
        netbsd*) source ${HOME}/.zshrc.d/zshexports/zshexports.netbsd ;;
        openbsd) source ${HOME}/.zshrc.d/zshexports/zshexports.openbsd ;;
        FreeBSD) source ${HOME}/.zshrc.d/zshexports/zshexports.freebsd ;;
    esac
fi

for var in \
    TMP=$HOME/tmp \
    TMPDIR=$HOME/tmp
do
    export $var
done


# An array (colon-separated list) of  directories  specifying  the
# search path for the cd command.
CDPATH="$PORTS_DIR"


#    LESS='-rX~deMwPM?f%f ?e[EOF] ?lt[Line\: %lb].:?lt[Line\: %lt]. ?pt%pt\%...' \
for var in \
    PAGER="less" \
    PERLDOC_PAGER="less -+C -E" \
    LESSCHARSET=utf-8 \
    LESS="-R -C -i -j4 -M -PM?m(%i/%m) .?f%f:Standard input.\: ?bb%bb?B/%B. Bytes.?pb (%pb\%).?lb, Zeile\: %lb?e ?x(-> %x):(EOF).%t" \
    LESSBINFMT='*u[%X]' \
    LESS_TERMCAP_mb=$'\E[01;31m' \
    LESS_TERMCAP_md=$'\E[01;31m' \
    LESS_TERMCAP_me=$'\E[0m' \
    LESS_TERMCAP_se=$'\E[0m' \
    LESS_TERMCAP_so=$'\E[01;44;33m' \
    LESS_TERMCAP_ue=$'\E[0m' \
    LESS_TERMCAP_us=$'\E[01;32m'
do
    export $var
done

if [ -x ${HOME}/scripts/lesspipe ]; then
    export LESSOPEN="${HOME}/scripts/lesspipe %s"
    #export LESSOPEN='|lesspipe %s'             # **EDIT**
fi


# Some settings for the manpages
# set the width to 80. Its enough
#export MANWIDTH=80
if [[ -x $(which most) ]]; then
    export MANPAGER="most"
else
     export MANPAGER="less -i -M -R"
     # use colors when browsing man pages (if not using pinfo or PAGER=most)
#     [[ -d ~/.terminfo/ ]] && alias man='TERMINFO=~/.terminfo/ LESS=C TERM=mostlike PAGER=less man'
fi


#CVSEDITOR=Nahra-editor \
#export CVSUMASK=003 # its the same as ``-rwxrwxr-x''
for var in \
    CVS_RSH=ssh \
    RSYNC_RSH=ssh
do
    export $var
done


#    TEXMFDIST=/usr/local/texlive/2010/texmf-dist \
#    TEXINPUTS=${HOME}/.emacs.d/site-lisp/bbdb/tex/::
#    TEXINPUTS=${HOME}/latex/macros:${HOME}/.emacs.d/site-lisp/bbdb/tex
#    TEXMFMAIN=$HOME/texmf \
for var in \
    TEXDIR=/usr/local/texlive/2010 \
    TEXMFLOCAL=/usr/local/texlive/texmf-local \
    TEXMFSYSVAR=/usr/local/texlive/2010/texmf-var \
    TEXMFSYSCONFIG=/usr/local/texlive/2010/texmf-config \
    TEXMFVAR=$HOME/.texlive2010/texmf-var \
    TEXMFCONFIG=$HOME/.texlive2010/texmf-config \
    TEXMFHOME=$HOME/texmf
do
    export $var
done

#emacs='env LANG=C LC_CTYPE=C LC_MESSAGES=C emacs' \
for var in \
    TERMCMD_1="urxvtc" \
    TERMCMD_2="urxvtc -pe tabbed" \
    TERMCMD_3="Eterm" \
    XLock="xlock +nolock" \
    mpstream="mplayer -profile stream" \
    mpx11="mplayer -profile x11" \
    mpsdl="mplayer -profile sdl" \
    mpplaylist='mplayer -profile stream -playlist' \
    ncmpc="ncmpc -f $HOME/.ncmpc/config"
do
    export $var
done


#if [ -z $DISPLAY ];
#then
#    DIALOG=dialog
#    DIALOG_PROG=dialog
#else
#    DIALOG=Xdialog
#    DIALOG_PROG=Xdialog
#fi
for var in \
    TODAY=`date +%Y-%m-%d_%H-%M-%S-%N` \
    DIALOG=dialog \
    DIALOG_PROG=dialog \
    NNTPSERVER=news.gmane.org \
    MPD_PORT=2100 \
    MLDK_INCOMING=/space/.mldonkey/incoming/files \
    XIVIEWER=pornview
do
    export $var
done


#export MOZ_DISABLE_PANGO=1
export WWW_HOME="http://www.google.com"
export HTTP_HOME="http://www.google.com"
# Using a /X11-Browser/ when X11 is up
if [ $DISPLAY ]; then
    export BROWSER="jumanji"
    export WWW_BROWSER="jumanji"
#    export WWW_BROWSER="${HOME}/bin/url_handler.sh %s"
#    export RAGGLE_BROWSER="${HOME}/bin/url_handler.sh"
else
    export WWW_BROWSER=${BROWSER:-lynx}
fi


# Needed for Perl.. i think so!?
#PERL_UTF8_LOCALE=1
#PERL_UNICODE=AS
# To stop Perl interpreters not configured to expect a Unicode locale:
#export PERL_BADLANG=0


#EDITOR=emacsclient \
#for var in \
#    ALTERNATE_EDITOR=emacs \
#    VISUAL="Nahra-editor" \
#    TEXEDIT="Nahra-editor +%d %s"
#do
#    export $var
#done


#  $ print ${${$(=vim --version)[5]}:gs/.//}
# is equivalent to 
#  $ /path/to/vim --version | head -n 1 | awk '{print $5}' | sed 's/\.//'
if [[ -x $(which vim) ]]; then
    export EDITOR=vim
    export VISUAL="${EDITOR}"
    export VIMRELEASE="`print ${${$(vim --version)[5]}:gs/.//}`"
else
    if [ -x $(which vi) ]; then
    # Yes. VI *is* standard in IEEE Std 1003.1, 2004 Edition!
        export EDITOR=vi
    fi
fi


: ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}}

if [ -f ~/.ssh/known_hosts ]; then
    _ssh_known_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:# *}%%\ *}%%,*})
else
    _ssh_known_hosts=()
fi

if [ -f ~/.ssh/config ]; then
    _ssh_config=( $(sed -n '/\*/d;/^Host/p;' ~/.ssh/config | awk '{ print $2 }'))
else
    _ssh_config=""
fi

hosts=(
    "$_etc_hosts[@]"
    "$_ssh_known_hosts[@]"
    "$_ssh_config[@]"
    localhost
)
